// Mock archive data
const mockArchiveData = [
    {
        
        id: 'archive_001',
        name: '–°–æ–∫–æ–ª–æ–≤–∞ –ï–ª–µ–Ω–∞ –ü–µ—Ç—Ä–æ–≤–Ω–∞',
        date: '2025-01-24',
        time: '14:30 - 18:45',
        room: '203',
        duration: '4—á 15–º–∏–Ω',
        outcome: '–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–æ–¥—ã, –±–µ–∑ –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–π',
        fwbsAverage: 88
    },
    {
        id: 'archive_002',
        name: '–ú–∏—Ö–∞–π–ª–æ–≤–∞ –û–ª—å–≥–∞ –ê–Ω–¥—Ä–µ–µ–≤–Ω–∞',
        date: '2025-01-23',
        time: '09:00 - 16:30',
        room: '305',
        duration: '7—á 30–º–∏–Ω',
        outcome: '–ö–µ—Å–∞—Ä–µ–≤–æ —Å–µ—á–µ–Ω–∏–µ (–ø–ª–∞–Ω–æ–≤–æ–µ)',
        fwbsAverage: 75
    },
    {
        id: 'archive_003',
        name: '–ë–µ–ª–æ–≤–∞ –¢–∞—Ç—å—è–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞',
        date: '2025-01-22',
        time: '20:15 - 03:45',
        room: '201',
        duration: '7—á 30–º–∏–Ω',
        outcome: '–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–æ–¥—ã, —ç–ø–∏–∑–∏–æ—Ç–æ–º–∏—è',
        fwbsAverage: 82
    },
    {
        id: 'archive_004',
        name: '–ù–æ–≤–∏–∫–æ–≤–∞ –ê–Ω–Ω–∞ –í–∏–∫—Ç–æ—Ä–æ–≤–Ω–∞',
        date: '2025-01-21',
        time: '11:00 - 14:20',
        room: '302',
        duration: '3—á 20–º–∏–Ω',
        outcome: '–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–æ–¥—ã, –±—ã—Å—Ç—Ä—ã–µ',
        fwbsAverage: 91
    }
];

class ArchiveApp {
    constructor() {
        this.searchResults = [];
    }

    init() {
        console.log('Initializing archive page...');
        this.setupEventListeners();
        this.startClock();
        this.setDefaultDates();
    }

    setupEventListeners() {
        const form = document.getElementById('search-form');
        if (form) {
            form.addEventListener('submit', (e) => {
                e.preventDefault();
                this.performSearch();
            });
        }
    }

    setDefaultDates() {
        // Set default date range (last 7 days)
        const dateFrom = document.getElementById('date-from');
        const dateTo = document.getElementById('date-to');
        
        if (dateTo) {
            dateTo.value = new Date().toISOString().split('T')[0];
        }
        
        if (dateFrom) {
            const weekAgo = new Date();
            weekAgo.setDate(weekAgo.getDate() - 7);
            dateFrom.value = weekAgo.toISOString().split('T')[0];
        }
    }

    performSearch() {
        console.log('Performing search...');
        
        // Get search parameters
        const nameSearch = document.getElementById('patient-name-search').value.toLowerCase();
        const dateFrom = document.getElementById('date-from').value;
        const dateTo = document.getElementById('date-to').value;
        
        // Simulate search delay
        this.showLoadingState();
        
        setTimeout(() => {
            // Filter mock data based on search criteria
            let results = [...mockArchiveData];
            
            if (nameSearch) {
                results = results.filter(item => 
                    item.name.toLowerCase().includes(nameSearch)
                );
            }
            
            if (dateFrom) {
                results = results.filter(item => 
                    item.date >= dateFrom
                );
            }
            
            if (dateTo) {
                results = results.filter(item => 
                    item.date <= dateTo
                );
            }
            
            // Always show at least some results for demo
            if (results.length === 0 && !nameSearch) {
                results = mockArchiveData.slice(0, 2);
            }
            
            this.searchResults = results;
            this.displayResults();
        }, 500);
    }

    showLoadingState() {
        const container = document.getElementById('archive-results');
        container.innerHTML = `
            <div class="loading-state">
                <div class="loading-spinner"></div>
                <p>–ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π...</p>
            </div>
        `;
    }

    displayResults() {
        const container = document.getElementById('archive-results');
        const countElement = document.getElementById('results-count');
        
        countElement.textContent = `–ù–∞–π–¥–µ–Ω–æ: ${this.searchResults.length} –∑–∞–ø–∏—Å–µ–π`;
        
        if (this.searchResults.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <div class="empty-state-icon">üîç</div>
                    <p class="empty-state-text">–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>
                    <p class="empty-state-hint">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</p>
                </div>
            `;
            return;
        }
        
        container.innerHTML = this.searchResults.map(result => `
            <div class="archive-card">
                <div class="archive-card-header">
                    <div class="archive-patient-info">
                        <h3 class="archive-patient-name">${result.name}</h3>
                        <div class="archive-meta">
                            <span class="meta-item">üìÖ ${this.formatDate(result.date)}</span>
                            <span class="meta-item">‚è± ${result.time}</span>
                            <span class="meta-item">üè• –ü–∞–ª–∞—Ç–∞ ${result.room}</span>
                            <span class="meta-item">‚è≥ ${result.duration}</span>
                        </div>
                    </div>
                    <div class="archive-score">
                        <div class="score-value ${this.getScoreClass(result.fwbsAverage)}">${result.fwbsAverage}</div>
                        <div class="score-label">–°—Ä–µ–¥–Ω–∏–π FWBS</div>
                    </div>
                </div>
                <div class="archive-card-body">
                    <div class="archive-outcome">
                        <span class="outcome-label">–ò—Å—Ö–æ–¥:</span>
                        <span class="outcome-text">${result.outcome}</span>
                    </div>
                </div>
                <div class="archive-card-footer">
<a href="archive-view.html?id=${result.id}" class="btn btn--small btn--primary">
    üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å—å
</a>
                    <button class="btn btn--small btn--secondary" onclick="archiveApp.downloadReport('${result.id}')">
                        üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç
                    </button>
                </div>
            </div>
        `).join('');
    }

    formatDate(dateString) {
        const date = new Date(dateString);
        const options = { day: 'numeric', month: 'long', year: 'numeric' };
        return date.toLocaleDateString('ru-RU', options);
    }

    getScoreClass(score) {
        if (score >= 85) return 'score-normal';
        if (score >= 70) return 'score-warning';
        return 'score-critical';
    }

    clearSearch() {
        document.getElementById('patient-name-search').value = '';
        this.setDefaultDates();
        
        const container = document.getElementById('archive-results');
        container.innerHTML = `
            <div class="empty-state">
                <div class="empty-state-icon">üîç</div>
                <p class="empty-state-text">–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º—É –ø–æ–∏—Å–∫–∞ –≤—ã—à–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π</p>
            </div>
        `;
        
        document.getElementById('results-count').textContent = '–ù–∞–π–¥–µ–Ω–æ: 0 –∑–∞–ø–∏—Å–µ–π';
        this.searchResults = [];
    }

async downloadReport(archiveId) {
    console.log('Generating PDF report for:', archiveId);
    
    // Show notification
    this.showNotification('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...', 'info');
    
    // Find the archive data
    const archiveData = this.searchResults.find(item => item.id === archiveId);
    if (!archiveData) {
        this.showNotification('–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'error');
        return;
    }
    
    try {
        // Create a hidden container for the report
        const reportContainer = document.createElement('div');
        reportContainer.id = 'pdf-report-container';
        reportContainer.style.cssText = `
            position: fixed;
            left: -9999px;
            top: 0;
            width: 794px;
            background: white;
            padding: 40px;
            font-family: 'Manrope', sans-serif;
        `;
        
        // Generate CTG data for charts
        const ctgData = this.generateMockCTGData();
        
        // Create report HTML with charts
        reportContainer.innerHTML = `
            <div style="background: white; padding: 20px;">
                <!-- Header -->
                <div style="text-align: center; margin-bottom: 40px;">
                    <h1 style="color: #2C2C3A; font-size: 28px; margin-bottom: 10px;">
                        –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –æ—Ç—á–µ—Ç –ö–¢–ì –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                    </h1>
                    <div style="color: #6C6C7D; font-size: 14px;">
                        –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥"
                    </div>
                </div>
                
                <!-- Patient Info Block -->
                <div style="background: #F4F7FE; padding: 25px; border-radius: 14px; margin-bottom: 30px;">
                    <h2 style="color: #6D63FF; font-size: 18px; margin-bottom: 20px; text-transform: uppercase;">
                        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ü–∏–µ–Ω—Ç–∫–µ
                    </h2>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                        <div>
                            <strong style="color: #6C6C7D; font-size: 12px;">–§–ò–û:</strong>
                            <div style="color: #2C2C3A; font-size: 16px; font-weight: 600;">${archiveData.name}</div>
                        </div>
                        <div>
                            <strong style="color: #6C6C7D; font-size: 12px;">ID –ó–ê–ü–ò–°–ò:</strong>
                            <div style="color: #2C2C3A; font-size: 16px; font-weight: 600;">${archiveData.id}</div>
                        </div>
                        <div>
                            <strong style="color: #6C6C7D; font-size: 12px;">–î–ê–¢–ê:</strong>
                            <div style="color: #2C2C3A; font-size: 16px; font-weight: 600;">${this.formatDate(archiveData.date)}</div>
                        </div>
                        <div>
                            <strong style="color: #6C6C7D; font-size: 12px;">–ü–ê–õ–ê–¢–ê:</strong>
                            <div style="color: #2C2C3A; font-size: 16px; font-weight: 600;">${archiveData.room}</div>
                        </div>
                        <div>
                            <strong style="color: #6C6C7D; font-size: 12px;">–í–†–ï–ú–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê:</strong>
                            <div style="color: #2C2C3A; font-size: 16px; font-weight: 600;">${archiveData.time}</div>
                        </div>
                        <div>
                            <strong style="color: #6C6C7D; font-size: 12px;">–ü–†–û–î–û–õ–ñ–ò–¢–ï–õ–¨–ù–û–°–¢–¨:</strong>
                            <div style="color: #2C2C3A; font-size: 16px; font-weight: 600;">${archiveData.duration}</div>
                        </div>
                    </div>
                </div>
                
                <!-- FWBS Score Block -->
                <div style="background: #F4F7FE; padding: 25px; border-radius: 14px; margin-bottom: 30px;">
                    <h2 style="color: #6D63FF; font-size: 18px; margin-bottom: 20px; text-transform: uppercase;">
                        –ò–Ω–¥–µ–∫—Å –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è –ø–ª–æ–¥–∞
                    </h2>
                    <div style="display: flex; align-items: center; gap: 30px;">
                        <div style="text-align: center;">
                            <div style="width: 120px; height: 120px; position: relative;">
                                <canvas id="wellbeing-chart" width="120" height="120"></canvas>
                            </div>
                        </div>
                        <div style="flex: 1;">
                            <div style="font-size: 48px; font-weight: 800; color: ${this.getScoreColorHex(archiveData.fwbsAverage)};">
                                ${archiveData.fwbsAverage}
                            </div>
                            <div style="color: #6C6C7D; font-size: 14px; margin-top: 5px;">
                                –°—Ä–µ–¥–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å FWBS
                            </div>
                            <div style="margin-top: 10px; padding: 10px; background: white; border-radius: 8px;">
                                <strong>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:</strong> ${this.getScoreInterpretation(archiveData.fwbsAverage)}
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- CTG Charts Block -->
                <div style="background: #F4F7FE; padding: 25px; border-radius: 14px; margin-bottom: 30px;">
                    <h2 style="color: #6D63FF; font-size: 18px; margin-bottom: 20px; text-transform: uppercase;">
                        –ö–∞—Ä–¥–∏–æ—Ç–æ–∫–æ–≥—Ä–∞—Ñ–∏—è (–ö–¢–ì)
                    </h2>
                    
                    <!-- FHR Chart -->
                    <div style="background: white; border-radius: 10px; padding: 15px; margin-bottom: 15px;">
                        <div style="color: #6C6C7D; font-size: 12px; margin-bottom: 10px;">–ß–°–° –ü–õ–û–î–ê (—É–¥/–º–∏–Ω)</div>
                        <canvas id="fhr-chart" width="700" height="150"></canvas>
                    </div>
                    
                    <!-- UA Chart -->
                    <div style="background: white; border-radius: 10px; padding: 15px;">
                        <div style="color: #6C6C7D; font-size: 12px; margin-bottom: 10px;">–ú–ê–¢–û–ß–ù–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨ (–æ—Ç–Ω.–µ–¥)</div>
                        <canvas id="ua-chart" width="700" height="100"></canvas>
                    </div>
                </div>
                
                <!-- Results Block -->
                <div style="background: #F4F7FE; padding: 25px; border-radius: 14px; margin-bottom: 30px;">
                    <h2 style="color: #6D63FF; font-size: 18px; margin-bottom: 20px; text-transform: uppercase;">
                        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –∏—Å—Ö–æ–¥
                    </h2>
                    <div style="padding: 15px; background: white; border-radius: 8px;">
                        <strong>–ò—Å—Ö–æ–¥ —Ä–æ–¥–æ–≤:</strong> ${archiveData.outcome}
                    </div>
                </div>
                
                <!-- Recommendations Block -->
                <div style="background: #F4F7FE; padding: 25px; border-radius: 14px; margin-bottom: 30px;">
                    <h2 style="color: #6D63FF; font-size: 18px; margin-bottom: 20px; text-transform: uppercase;">
                        –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                    </h2>
                    <div style="padding: 15px; background: white; border-radius: 8px; line-height: 1.6;">
                        ${this.getRecommendations(archiveData.fwbsAverage)}
                    </div>
                </div>
                
                <!-- Footer -->
                <div style="text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid #F0F0F3;">
                    <div style="color: #9A9AAB; font-size: 12px;">
                        –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${new Date().toLocaleString('ru-RU')}
                    </div>
                    <div style="color: #9A9AAB; font-size: 12px; margin-top: 5px;">
                        –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ö–¢–ì "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥"
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(reportContainer);
        
        // Create charts
        await this.createChartsForPDF(archiveData.fwbsAverage, ctgData);
        
        // Wait for charts to render
        await new Promise(resolve => setTimeout(resolve, 500));
        
        // Generate PDF using html2canvas and jsPDF
        const canvas = await html2canvas(reportContainer, {
            scale: 2,
            useCORS: true,
            logging: false,
            backgroundColor: '#ffffff'
        });
        
        const imgData = canvas.toDataURL('image/png');
        const pdf = new window.jspdf.jsPDF({
            orientation: 'portrait',
            unit: 'mm',
            format: 'a4'
        });
        
        const imgWidth = 210; // A4 width in mm
        const pageHeight = 297; // A4 height in mm
        const imgHeight = (canvas.height * imgWidth) / canvas.width;
        let heightLeft = imgHeight;
        let position = 0;
        
        // Add first page
        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
        heightLeft -= pageHeight;
        
        // Add additional pages if needed
        while (heightLeft >= 0) {
            position = heightLeft - imgHeight;
            pdf.addPage();
            pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
            heightLeft -= pageHeight;
        }
        
        // Save PDF
        const fileName = `–ö–¢–ì_–æ—Ç—á–µ—Ç_${archiveData.name.replace(/\s+/g, '_')}_${archiveData.date}.pdf`;
        pdf.save(fileName);
        
        // Clean up
        document.body.removeChild(reportContainer);
        
        // Show success notification
        this.showNotification('–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!', 'success');
        
    } catch (error) {
        console.error('Error generating PDF:', error);
        this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞', 'error');
    }
}

// Helper function to create charts for PDF
async createChartsForPDF(fwbsScore, ctgData) {
    // Create wellbeing chart
    const wellbeingCtx = document.getElementById('wellbeing-chart').getContext('2d');
    new Chart(wellbeingCtx, {
        type: 'doughnut',
        data: {
            datasets: [{
                data: [fwbsScore, 100 - fwbsScore],
                backgroundColor: [this.getScoreColorHex(fwbsScore), '#F0F0F3'],
                borderWidth: 0
            }]
        },
        options: {
            responsive: false,
            maintainAspectRatio: true,
            cutout: '75%',
            plugins: {
                legend: { display: false },
                tooltip: { enabled: false }
            }
        },
        plugins: [{
            id: 'centerText',
            afterDraw: function(chart) {
                const ctx = chart.ctx;
                ctx.save();
                const centerX = chart.width / 2;
                const centerY = chart.height / 2;
                ctx.font = 'bold 36px Manrope';
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                ctx.fillStyle = '#2C2C3A';
                ctx.fillText(fwbsScore, centerX, centerY);
                ctx.restore();
            }
        }]
    });
    
    // Create FHR chart
    const fhrCtx = document.getElementById('fhr-chart').getContext('2d');
    new Chart(fhrCtx, {
        type: 'line',
        data: {
            labels: ctgData.labels,
            datasets: [{
                label: '–ß–°–°',
                data: ctgData.fhr,
                borderColor: '#FF1744',
                backgroundColor: 'transparent',
                borderWidth: 1.5,
                pointRadius: 0,
                tension: 0.15
            }]
        },
        options: {
            responsive: false,
            maintainAspectRatio: false,
            scales: {
                y: {
                    min: 50,
                    max: 210,
                    grid: { color: 'rgba(0,0,0,0.05)' }
                },
                x: {
                    grid: { color: 'rgba(0,0,0,0.05)' }
                }
            },
            plugins: {
                legend: { display: false }
            }
        }
    });
    
    // Create UA chart
    const uaCtx = document.getElementById('ua-chart').getContext('2d');
    new Chart(uaCtx, {
        type: 'line',
        data: {
            labels: ctgData.labels,
            datasets: [{
                label: '–°–î–ú',
                data: ctgData.ua,
                borderColor: '#0D47A1',
                backgroundColor: 'rgba(13, 71, 161, 0.1)',
                borderWidth: 1.5,
                pointRadius: 0,
                tension: 0.15,
                fill: true
            }]
        },
        options: {
            responsive: false,
            maintainAspectRatio: false,
            scales: {
                y: {
                    min: 0,
                    max: 100,
                    grid: { color: 'rgba(0,0,0,0.05)' }
                },
                x: {
                    grid: { color: 'rgba(0,0,0,0.05)' }
                }
            },
            plugins: {
                legend: { display: false }
            }
        }
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ö–¢–ì (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è)
generateMockCTGData() {
    const dataPoints = 30; // –°–æ–∫—Ä–∞—Ç–∏–ª–∏ —Å 60 –¥–æ 30 —Ç–æ—á–µ–∫
    const data = {
        labels: [],
        fhr: [],
        ua: []
    };
    
    for (let i = 0; i < dataPoints; i++) {
        // –ú–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã –≤–º–µ—Å—Ç–æ –∫–∞–∂–¥–æ–π –º–∏–Ω—É—Ç—ã
        data.labels.push((i * 2) + ' –º–∏–Ω');
        
        // Generate FHR data (baseline around 140)
        const fhrBase = 140;
        const fhrVariation = Math.sin(i * 0.1) * 10 + Math.random() * 5 - 2.5;
        data.fhr.push(Math.round(fhrBase + fhrVariation));
        
        // Generate UA data (contractions)
        let uaValue = 5 + Math.random() * 5;
        if (i % 15 === 0 || i % 15 === 1 || i % 15 === 2) {
            uaValue = 40 + Math.random() * 20;
        }
        data.ua.push(Math.round(uaValue));
    }
    
    return data;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è downloadReport
async downloadReport(archiveId) {
    console.log('Generating PDF report for:', archiveId);
    
    // Show notification
    this.showNotification('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...', 'info');
    
    // Find the archive data
    const archiveData = this.searchResults.find(item => item.id === archiveId);
    if (!archiveData) {
        this.showNotification('–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'error');
        return;
    }
    
    try {
        // Create a hidden container for the report
        const reportContainer = document.createElement('div');
        reportContainer.id = 'pdf-report-container';
        reportContainer.style.cssText = `
            position: fixed;
            left: -9999px;
            top: 0;
            width: 794px;
            background: white;
            padding: 40px;
            font-family: 'Manrope', sans-serif;
        `;
        
        // Generate CTG data for charts (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        const ctgData = this.generateMockCTGData();
        
        // Create report HTML with charts (–ë–ï–ó —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ —Å —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–º–∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏)
        reportContainer.innerHTML = `
            <div style="background: white; padding: 20px;">
                <!-- Header -->
                <div style="text-align: center; margin-bottom: 30px;">
                    <h1 style="color: #2C2C3A; font-size: 26px; margin-bottom: 10px;">
                        –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –æ—Ç—á–µ—Ç –ö–¢–ì –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                    </h1>
                    <div style="color: #6C6C7D; font-size: 14px;">
                        –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥"
                    </div>
                </div>
                
                <!-- Patient Info Block -->
                <div style="background: #F4F7FE; padding: 20px; border-radius: 14px; margin-bottom: 25px;">
                    <h2 style="color: #6D63FF; font-size: 16px; margin-bottom: 15px; text-transform: uppercase;">
                        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ü–∏–µ–Ω—Ç–∫–µ
                    </h2>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 12px;">
                        <div>
                            <strong style="color: #6C6C7D; font-size: 11px;">–§–ò–û:</strong>
                            <div style="color: #2C2C3A; font-size: 14px; font-weight: 600;">${archiveData.name}</div>
                        </div>
                        <div>
                            <strong style="color: #6C6C7D; font-size: 11px;">ID –ó–ê–ü–ò–°–ò:</strong>
                            <div style="color: #2C2C3A; font-size: 14px; font-weight: 600;">${archiveData.id}</div>
                        </div>
                        <div>
                            <strong style="color: #6C6C7D; font-size: 11px;">–î–ê–¢–ê:</strong>
                            <div style="color: #2C2C3A; font-size: 14px; font-weight: 600;">${this.formatDate(archiveData.date)}</div>
                        </div>
                        <div>
                            <strong style="color: #6C6C7D; font-size: 11px;">–ü–ê–õ–ê–¢–ê:</strong>
                            <div style="color: #2C2C3A; font-size: 14px; font-weight: 600;">${archiveData.room}</div>
                        </div>
                        <div>
                            <strong style="color: #6C6C7D; font-size: 11px;">–í–†–ï–ú–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê:</strong>
                            <div style="color: #2C2C3A; font-size: 14px; font-weight: 600;">${archiveData.time}</div>
                        </div>
                        <div>
                            <strong style="color: #6C6C7D; font-size: 11px;">–ü–†–û–î–û–õ–ñ–ò–¢–ï–õ–¨–ù–û–°–¢–¨:</strong>
                            <div style="color: #2C2C3A; font-size: 14px; font-weight: 600;">${archiveData.duration}</div>
                        </div>
                    </div>
                </div>
                
                <!-- FWBS Score Block -->
                <div style="background: #F4F7FE; padding: 20px; border-radius: 14px; margin-bottom: 25px;">
                    <h2 style="color: #6D63FF; font-size: 16px; margin-bottom: 15px; text-transform: uppercase;">
                        –ò–Ω–¥–µ–∫—Å –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è –ø–ª–æ–¥–∞
                    </h2>
                    <div style="display: flex; align-items: center; gap: 25px;">
                        <div style="text-align: center;">
                            <div style="width: 100px; height: 100px; position: relative;">
                                <canvas id="wellbeing-chart" width="100" height="100"></canvas>
                            </div>
                        </div>
                        <div style="flex: 1;">
                            <div style="font-size: 42px; font-weight: 800; color: ${this.getScoreColorHex(archiveData.fwbsAverage)};">
                                ${archiveData.fwbsAverage}
                            </div>
                            <div style="color: #6C6C7D; font-size: 13px; margin-top: 5px;">
                                –°—Ä–µ–¥–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å FWBS
                            </div>
                            <div style="margin-top: 10px; padding: 8px; background: white; border-radius: 8px; font-size: 13px;">
                                <strong>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:</strong> ${this.getScoreInterpretation(archiveData.fwbsAverage)}
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- CTG Charts Block (—É–º–µ–Ω—å—à–µ–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏) -->
                <div style="background: #F4F7FE; padding: 20px; border-radius: 14px; margin-bottom: 25px;">
                    <h2 style="color: #6D63FF; font-size: 16px; margin-bottom: 15px; text-transform: uppercase;">
                        –ö–∞—Ä–¥–∏–æ—Ç–æ–∫–æ–≥—Ä–∞—Ñ–∏—è (–ö–¢–ì)
                    </h2>
                    
                    <!-- FHR Chart (—É–º–µ–Ω—å—à–µ–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞) -->
                    <div style="background: white; border-radius: 10px; padding: 12px; margin-bottom: 12px;">
                        <div style="color: #6C6C7D; font-size: 11px; margin-bottom: 8px;">–ß–°–° –ü–õ–û–î–ê (—É–¥/–º–∏–Ω)</div>
                        <canvas id="fhr-chart" width="500" height="120"></canvas>
                    </div>
                    
                    <!-- UA Chart (—É–º–µ–Ω—å—à–µ–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞) -->
                    <div style="background: white; border-radius: 10px; padding: 12px;">
                        <div style="color: #6C6C7D; font-size: 11px; margin-bottom: 8px;">–ú–ê–¢–û–ß–ù–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨ (–æ—Ç–Ω.–µ–¥)</div>
                        <canvas id="ua-chart" width="500" height="80"></canvas>
                    </div>
                </div>
                
                <!-- Results Block -->
                <div style="background: #F4F7FE; padding: 20px; border-radius: 14px; margin-bottom: 25px;">
                    <h2 style="color: #6D63FF; font-size: 16px; margin-bottom: 15px; text-transform: uppercase;">
                        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –∏—Å—Ö–æ–¥
                    </h2>
                    <div style="padding: 12px; background: white; border-radius: 8px; font-size: 14px;">
                        <strong>–ò—Å—Ö–æ–¥ —Ä–æ–¥–æ–≤:</strong> ${archiveData.outcome}
                    </div>
                </div>
                
                <!-- –£–î–ê–õ–ï–ù –ë–õ–û–ö –° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø–ú–ò -->
                
                <!-- Footer -->
                <div style="text-align: center; margin-top: 30px; padding-top: 15px; border-top: 1px solid #F0F0F3;">
                    <div style="color: #9A9AAB; font-size: 11px;">
                        –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${new Date().toLocaleString('ru-RU')}
                    </div>
                    <div style="color: #9A9AAB; font-size: 11px; margin-top: 5px;">
                        –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ö–¢–ì "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥"
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(reportContainer);
        
        // Create charts
        await this.createChartsForPDF(archiveData.fwbsAverage, ctgData);
        
        // Wait for charts to render
        await new Promise(resolve => setTimeout(resolve, 500));
        
        // Generate PDF using html2canvas and jsPDF
        const canvas = await html2canvas(reportContainer, {
            scale: 2,
            useCORS: true,
            logging: false,
            backgroundColor: '#ffffff'
        });
        
        const imgData = canvas.toDataURL('image/png');
        const pdf = new window.jspdf.jsPDF({
            orientation: 'portrait',
            unit: 'mm',
            format: 'a4'
        });
        
        const imgWidth = 210; // A4 width in mm
        const pageHeight = 297; // A4 height in mm
        const imgHeight = (canvas.height * imgWidth) / canvas.width;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É (—Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–æ –ø–æ–º–µ—â–∞—Ç—å—Å—è)
        pdf.addImage(imgData, 'PNG', 0, 0, imgWidth, Math.min(imgHeight, pageHeight));
        
        // Save PDF
        const fileName = `–ö–¢–ì_–æ—Ç—á–µ—Ç_${archiveData.name.replace(/\s+/g, '_')}_${archiveData.date}.pdf`;
        pdf.save(fileName);
        
        // Clean up
        document.body.removeChild(reportContainer);
        
        // Show success notification
        this.showNotification('–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!', 'success');
        
    } catch (error) {
        console.error('Error generating PDF:', error);
        this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞', 'error');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è createChartsForPDF —Å –º–µ–Ω—å—à–∏–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
async createChartsForPDF(fwbsScore, ctgData) {
    // Create wellbeing chart (—É–º–µ–Ω—å—à–µ–Ω–Ω—ã–π)
    const wellbeingCtx = document.getElementById('wellbeing-chart').getContext('2d');
    new Chart(wellbeingCtx, {
        type: 'doughnut',
        data: {
            datasets: [{
                data: [fwbsScore, 100 - fwbsScore],
                backgroundColor: [this.getScoreColorHex(fwbsScore), '#F0F0F3'],
                borderWidth: 0
            }]
        },
        options: {
            responsive: false,
            maintainAspectRatio: true,
            cutout: '75%',
            plugins: {
                legend: { display: false },
                tooltip: { enabled: false }
            }
        },
        plugins: [{
            id: 'centerText',
            afterDraw: function(chart) {
                const ctx = chart.ctx;
                ctx.save();
                const centerX = chart.width / 2;
                const centerY = chart.height / 2;
                ctx.font = 'bold 28px Manrope';
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                ctx.fillStyle = '#2C2C3A';
                ctx.fillText(fwbsScore, centerX, centerY);
                ctx.restore();
            }
        }]
    });
    
    // Create FHR chart (—É–º–µ–Ω—å—à–µ–Ω–Ω—ã–π)
    const fhrCtx = document.getElementById('fhr-chart').getContext('2d');
    new Chart(fhrCtx, {
        type: 'line',
        data: {
            labels: ctgData.labels,
            datasets: [{
                label: '–ß–°–°',
                data: ctgData.fhr,
                borderColor: '#FF1744',
                backgroundColor: 'transparent',
                borderWidth: 1.5,
                pointRadius: 0,
                tension: 0.15
            }]
        },
        options: {
            responsive: false,
            maintainAspectRatio: false,
            scales: {
                y: {
                    min: 50,
                    max: 210,
                    grid: { color: 'rgba(0,0,0,0.05)' },
                    ticks: { font: { size: 10 } }
                },
                x: {
                    grid: { color: 'rgba(0,0,0,0.05)' },
                    ticks: { 
                        font: { size: 9 },
                        maxRotation: 0,
                        autoSkip: true,
                        maxTicksLimit: 10
                    }
                }
            },
            plugins: {
                legend: { display: false }
            }
        }
    });
    
    // Create UA chart (—É–º–µ–Ω—å—à–µ–Ω–Ω—ã–π)
    const uaCtx = document.getElementById('ua-chart').getContext('2d');
    new Chart(uaCtx, {
        type: 'line',
        data: {
            labels: ctgData.labels,
            datasets: [{
                label: '–°–î–ú',
                data: ctgData.ua,
                borderColor: '#0D47A1',
                backgroundColor: 'rgba(13, 71, 161, 0.1)',
                borderWidth: 1.5,
                pointRadius: 0,
                tension: 0.15,
                fill: true
            }]
        },
        options: {
            responsive: false,
            maintainAspectRatio: false,
            scales: {
                y: {
                    min: 0,
                    max: 100,
                    grid: { color: 'rgba(0,0,0,0.05)' },
                    ticks: { font: { size: 10 } }
                },
                x: {
                    grid: { color: 'rgba(0,0,0,0.05)' },
                    ticks: { 
                        font: { size: 9 },
                        maxRotation: 0,
                        autoSkip: true,
                        maxTicksLimit: 10
                    }
                }
            },
            plugins: {
                legend: { display: false }
            }
        }
    });
}

// Helper function to get hex color based on score
getScoreColorHex(score) {
    if (score >= 85) return '#2ED47A';
    if (score >= 70) return '#FFB946';
    return '#FF5B5B';
}

// Helper function to get score interpretation
getScoreInterpretation(score) {
    if (score >= 85) return '–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–æ–¥–∞. –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã.';
    if (score >= 70) return '–£–º–µ—Ä–µ–Ω–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—ã—à–µ–Ω–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ.';
    return '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ.';
}

// Helper function to get recommendations based on score
getRecommendations(score) {
    if (score >= 85) {
        return `
            <ul style="margin: 0; padding-left: 20px;">
                <li>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ</li>
                <li>–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ö–¢–ì —á–µ—Ä–µ–∑ 4-6 —á–∞—Å–æ–≤</li>
                <li>–ö–æ–Ω—Ç—Ä–æ–ª—å –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –º–∞—Ç–µ—Ä–∏</li>
                <li>–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∫–∞—Ä—Ç–µ</li>
            </ul>
        `;
    } else if (score >= 70) {
        return `
            <ul style="margin: 0; padding-left: 20px;">
                <li>–£—Å–∏–ª–µ–Ω–Ω–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–ª–æ–¥–∞</li>
                <li>–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ö–¢–ì —á–µ—Ä–µ–∑ 1-2 —á–∞—Å–∞</li>
                <li>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∞–∫—É—à–µ—Ä–∞-–≥–∏–Ω–µ–∫–æ–ª–æ–≥–∞</li>
                <li>–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏</li>
                <li>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤–æ–∑–º–æ–∂–Ω–æ–º—É —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–º—É —Ä–æ–¥–æ—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é</li>
            </ul>
        `;
    } else {
        return `
            <ul style="margin: 0; padding-left: 20px; color: #FF5B5B;">
                <li><strong>–°–†–û–ß–ù–û!</strong> –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤—Ä–∞—á–∞</li>
                <li>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–º—É —Ä–æ–¥–æ—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é</li>
                <li>–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ö–¢–ì</li>
                <li>–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π</li>
                <li>–ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–∂—É—Ä–Ω–æ–π –±—Ä–∏–≥–∞–¥—ã</li>
            </ul>
        `;
    }
}

    showNotification(message, type = 'info') {
        // Create notification element
        const notification = document.createElement('div');
        notification.className = `notification notification--${type}`;
        notification.innerHTML = `
            <span class="notification-text">${message}</span>
        `;
        
        // Add to body
        document.body.appendChild(notification);
        
        // Animate in
        setTimeout(() => {
            notification.classList.add('notification--show');
        }, 10);
        
        // Remove after 3 seconds
        setTimeout(() => {
            notification.classList.remove('notification--show');
            setTimeout(() => {
                notification.remove();
            }, 300);
        }, 3000);
    }

    startClock() {
        const updateTime = () => {
            const now = new Date();
            const hours = String(now.getHours()).padStart(2, '0');
            const minutes = String(now.getMinutes()).padStart(2, '0');
            const timeElement = document.getElementById('current-time');
            if (timeElement) {
                timeElement.textContent = `${hours}:${minutes}`;
            }
        };
        
        updateTime();
        setInterval(updateTime, 1000);
    }
}

// Initialize app when DOM is ready
let archiveApp;

document.addEventListener('DOMContentLoaded', function() {
    console.log('Initializing archive page...');
    archiveApp = new ArchiveApp();
    archiveApp.init();
});